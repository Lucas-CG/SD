/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculator_H
#define Calculator_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "calculator_types.h"

namespace oparitmeticas {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CalculatorIf {
 public:
  virtual ~CalculatorIf() {}
  virtual void ping() = 0;
  virtual void power(std::vector<double> & _return, const std::vector<double> & received, const double exp) = 0;
  virtual void log(std::vector<double> & _return, const std::vector<double> & received) = 0;
  virtual void root(std::vector<double> & _return, const std::vector<double> & received) = 0;
};

class CalculatorIfFactory {
 public:
  typedef CalculatorIf Handler;

  virtual ~CalculatorIfFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculatorIf* /* handler */) = 0;
};

class CalculatorIfSingletonFactory : virtual public CalculatorIfFactory {
 public:
  CalculatorIfSingletonFactory(const boost::shared_ptr<CalculatorIf>& iface) : iface_(iface) {}
  virtual ~CalculatorIfSingletonFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalculatorIf* /* handler */) {}

 protected:
  boost::shared_ptr<CalculatorIf> iface_;
};

class CalculatorNull : virtual public CalculatorIf {
 public:
  virtual ~CalculatorNull() {}
  void ping() {
    return;
  }
  void power(std::vector<double> & /* _return */, const std::vector<double> & /* received */, const double /* exp */) {
    return;
  }
  void log(std::vector<double> & /* _return */, const std::vector<double> & /* received */) {
    return;
  }
  void root(std::vector<double> & /* _return */, const std::vector<double> & /* received */) {
    return;
  }
};


class Calculator_ping_args {
 public:

  Calculator_ping_args(const Calculator_ping_args&);
  Calculator_ping_args& operator=(const Calculator_ping_args&);
  Calculator_ping_args() {
  }

  virtual ~Calculator_ping_args() throw();

  bool operator == (const Calculator_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_ping_pargs {
 public:


  virtual ~Calculator_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_ping_result {
 public:

  Calculator_ping_result(const Calculator_ping_result&);
  Calculator_ping_result& operator=(const Calculator_ping_result&);
  Calculator_ping_result() {
  }

  virtual ~Calculator_ping_result() throw();

  bool operator == (const Calculator_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_ping_presult {
 public:


  virtual ~Calculator_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_power_args__isset {
  _Calculator_power_args__isset() : received(false), exp(false) {}
  bool received :1;
  bool exp :1;
} _Calculator_power_args__isset;

class Calculator_power_args {
 public:

  Calculator_power_args(const Calculator_power_args&);
  Calculator_power_args& operator=(const Calculator_power_args&);
  Calculator_power_args() : exp(0) {
  }

  virtual ~Calculator_power_args() throw();
  std::vector<double>  received;
  double exp;

  _Calculator_power_args__isset __isset;

  void __set_received(const std::vector<double> & val);

  void __set_exp(const double val);

  bool operator == (const Calculator_power_args & rhs) const
  {
    if (!(received == rhs.received))
      return false;
    if (!(exp == rhs.exp))
      return false;
    return true;
  }
  bool operator != (const Calculator_power_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_power_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_power_pargs {
 public:


  virtual ~Calculator_power_pargs() throw();
  const std::vector<double> * received;
  const double* exp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_power_result__isset {
  _Calculator_power_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Calculator_power_result__isset;

class Calculator_power_result {
 public:

  Calculator_power_result(const Calculator_power_result&);
  Calculator_power_result& operator=(const Calculator_power_result&);
  Calculator_power_result() {
  }

  virtual ~Calculator_power_result() throw();
  std::vector<double>  success;
  InvalidOperation ouch;

  _Calculator_power_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const Calculator_power_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Calculator_power_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_power_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_power_presult__isset {
  _Calculator_power_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Calculator_power_presult__isset;

class Calculator_power_presult {
 public:


  virtual ~Calculator_power_presult() throw();
  std::vector<double> * success;
  InvalidOperation ouch;

  _Calculator_power_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_log_args__isset {
  _Calculator_log_args__isset() : received(false) {}
  bool received :1;
} _Calculator_log_args__isset;

class Calculator_log_args {
 public:

  Calculator_log_args(const Calculator_log_args&);
  Calculator_log_args& operator=(const Calculator_log_args&);
  Calculator_log_args() {
  }

  virtual ~Calculator_log_args() throw();
  std::vector<double>  received;

  _Calculator_log_args__isset __isset;

  void __set_received(const std::vector<double> & val);

  bool operator == (const Calculator_log_args & rhs) const
  {
    if (!(received == rhs.received))
      return false;
    return true;
  }
  bool operator != (const Calculator_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_log_pargs {
 public:


  virtual ~Calculator_log_pargs() throw();
  const std::vector<double> * received;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_log_result__isset {
  _Calculator_log_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Calculator_log_result__isset;

class Calculator_log_result {
 public:

  Calculator_log_result(const Calculator_log_result&);
  Calculator_log_result& operator=(const Calculator_log_result&);
  Calculator_log_result() {
  }

  virtual ~Calculator_log_result() throw();
  std::vector<double>  success;
  InvalidOperation ouch;

  _Calculator_log_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const Calculator_log_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Calculator_log_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_log_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_log_presult__isset {
  _Calculator_log_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Calculator_log_presult__isset;

class Calculator_log_presult {
 public:


  virtual ~Calculator_log_presult() throw();
  std::vector<double> * success;
  InvalidOperation ouch;

  _Calculator_log_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculator_root_args__isset {
  _Calculator_root_args__isset() : received(false) {}
  bool received :1;
} _Calculator_root_args__isset;

class Calculator_root_args {
 public:

  Calculator_root_args(const Calculator_root_args&);
  Calculator_root_args& operator=(const Calculator_root_args&);
  Calculator_root_args() {
  }

  virtual ~Calculator_root_args() throw();
  std::vector<double>  received;

  _Calculator_root_args__isset __isset;

  void __set_received(const std::vector<double> & val);

  bool operator == (const Calculator_root_args & rhs) const
  {
    if (!(received == rhs.received))
      return false;
    return true;
  }
  bool operator != (const Calculator_root_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_root_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculator_root_pargs {
 public:


  virtual ~Calculator_root_pargs() throw();
  const std::vector<double> * received;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_root_result__isset {
  _Calculator_root_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Calculator_root_result__isset;

class Calculator_root_result {
 public:

  Calculator_root_result(const Calculator_root_result&);
  Calculator_root_result& operator=(const Calculator_root_result&);
  Calculator_root_result() {
  }

  virtual ~Calculator_root_result() throw();
  std::vector<double>  success;
  InvalidOperation ouch;

  _Calculator_root_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const Calculator_root_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const Calculator_root_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_root_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculator_root_presult__isset {
  _Calculator_root_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _Calculator_root_presult__isset;

class Calculator_root_presult {
 public:


  virtual ~Calculator_root_presult() throw();
  std::vector<double> * success;
  InvalidOperation ouch;

  _Calculator_root_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculatorClient : virtual public CalculatorIf {
 public:
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void power(std::vector<double> & _return, const std::vector<double> & received, const double exp);
  void send_power(const std::vector<double> & received, const double exp);
  void recv_power(std::vector<double> & _return);
  void log(std::vector<double> & _return, const std::vector<double> & received);
  void send_log(const std::vector<double> & received);
  void recv_log(std::vector<double> & _return);
  void root(std::vector<double> & _return, const std::vector<double> & received);
  void send_root(const std::vector<double> & received);
  void recv_root(std::vector<double> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CalculatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalculatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_power(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_root(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculatorProcessor(boost::shared_ptr<CalculatorIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &CalculatorProcessor::process_ping;
    processMap_["power"] = &CalculatorProcessor::process_power;
    processMap_["log"] = &CalculatorProcessor::process_log;
    processMap_["root"] = &CalculatorProcessor::process_root;
  }

  virtual ~CalculatorProcessor() {}
};

class CalculatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculatorProcessorFactory(const ::boost::shared_ptr< CalculatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CalculatorIfFactory > handlerFactory_;
};

class CalculatorMultiface : virtual public CalculatorIf {
 public:
  CalculatorMultiface(std::vector<boost::shared_ptr<CalculatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculatorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CalculatorIf> > ifaces_;
  CalculatorMultiface() {}
  void add(boost::shared_ptr<CalculatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void power(std::vector<double> & _return, const std::vector<double> & received, const double exp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->power(_return, received, exp);
    }
    ifaces_[i]->power(_return, received, exp);
    return;
  }

  void log(std::vector<double> & _return, const std::vector<double> & received) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->log(_return, received);
    }
    ifaces_[i]->log(_return, received);
    return;
  }

  void root(std::vector<double> & _return, const std::vector<double> & received) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->root(_return, received);
    }
    ifaces_[i]->root(_return, received);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CalculatorConcurrentClient : virtual public CalculatorIf {
 public:
  CalculatorConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculatorConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void power(std::vector<double> & _return, const std::vector<double> & received, const double exp);
  int32_t send_power(const std::vector<double> & received, const double exp);
  void recv_power(std::vector<double> & _return, const int32_t seqid);
  void log(std::vector<double> & _return, const std::vector<double> & received);
  int32_t send_log(const std::vector<double> & received);
  void recv_log(std::vector<double> & _return, const int32_t seqid);
  void root(std::vector<double> & _return, const std::vector<double> & received);
  int32_t send_root(const std::vector<double> & received);
  void recv_root(std::vector<double> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
