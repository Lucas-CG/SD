/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MutualExclusion_H
#define MutualExclusion_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "mutualexclusion_types.h"

namespace mutualexclusion {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MutualExclusionIf {
 public:
  virtual ~MutualExclusionIf() {}
  virtual void request() = 0;
  virtual void release() = 0;
};

class MutualExclusionIfFactory {
 public:
  typedef MutualExclusionIf Handler;

  virtual ~MutualExclusionIfFactory() {}

  virtual MutualExclusionIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MutualExclusionIf* /* handler */) = 0;
};

class MutualExclusionIfSingletonFactory : virtual public MutualExclusionIfFactory {
 public:
  MutualExclusionIfSingletonFactory(const boost::shared_ptr<MutualExclusionIf>& iface) : iface_(iface) {}
  virtual ~MutualExclusionIfSingletonFactory() {}

  virtual MutualExclusionIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MutualExclusionIf* /* handler */) {}

 protected:
  boost::shared_ptr<MutualExclusionIf> iface_;
};

class MutualExclusionNull : virtual public MutualExclusionIf {
 public:
  virtual ~MutualExclusionNull() {}
  void request() {
    return;
  }
  void release() {
    return;
  }
};


class MutualExclusion_request_args {
 public:

  MutualExclusion_request_args(const MutualExclusion_request_args&);
  MutualExclusion_request_args& operator=(const MutualExclusion_request_args&);
  MutualExclusion_request_args() {
  }

  virtual ~MutualExclusion_request_args() throw();

  bool operator == (const MutualExclusion_request_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MutualExclusion_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MutualExclusion_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MutualExclusion_request_pargs {
 public:


  virtual ~MutualExclusion_request_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MutualExclusion_request_result {
 public:

  MutualExclusion_request_result(const MutualExclusion_request_result&);
  MutualExclusion_request_result& operator=(const MutualExclusion_request_result&);
  MutualExclusion_request_result() {
  }

  virtual ~MutualExclusion_request_result() throw();

  bool operator == (const MutualExclusion_request_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MutualExclusion_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MutualExclusion_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MutualExclusion_request_presult {
 public:


  virtual ~MutualExclusion_request_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MutualExclusion_release_args {
 public:

  MutualExclusion_release_args(const MutualExclusion_release_args&);
  MutualExclusion_release_args& operator=(const MutualExclusion_release_args&);
  MutualExclusion_release_args() {
  }

  virtual ~MutualExclusion_release_args() throw();

  bool operator == (const MutualExclusion_release_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MutualExclusion_release_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MutualExclusion_release_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MutualExclusion_release_pargs {
 public:


  virtual ~MutualExclusion_release_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MutualExclusion_release_result {
 public:

  MutualExclusion_release_result(const MutualExclusion_release_result&);
  MutualExclusion_release_result& operator=(const MutualExclusion_release_result&);
  MutualExclusion_release_result() {
  }

  virtual ~MutualExclusion_release_result() throw();

  bool operator == (const MutualExclusion_release_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MutualExclusion_release_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MutualExclusion_release_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MutualExclusion_release_presult {
 public:


  virtual ~MutualExclusion_release_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MutualExclusionClient : virtual public MutualExclusionIf {
 public:
  MutualExclusionClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MutualExclusionClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void request();
  void send_request();
  void recv_request();
  void release();
  void send_release();
  void recv_release();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MutualExclusionProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MutualExclusionIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MutualExclusionProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_release(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MutualExclusionProcessor(boost::shared_ptr<MutualExclusionIf> iface) :
    iface_(iface) {
    processMap_["request"] = &MutualExclusionProcessor::process_request;
    processMap_["release"] = &MutualExclusionProcessor::process_release;
  }

  virtual ~MutualExclusionProcessor() {}
};

class MutualExclusionProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MutualExclusionProcessorFactory(const ::boost::shared_ptr< MutualExclusionIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MutualExclusionIfFactory > handlerFactory_;
};

class MutualExclusionMultiface : virtual public MutualExclusionIf {
 public:
  MutualExclusionMultiface(std::vector<boost::shared_ptr<MutualExclusionIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MutualExclusionMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MutualExclusionIf> > ifaces_;
  MutualExclusionMultiface() {}
  void add(boost::shared_ptr<MutualExclusionIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void request() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request();
    }
    ifaces_[i]->request();
  }

  void release() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->release();
    }
    ifaces_[i]->release();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MutualExclusionConcurrentClient : virtual public MutualExclusionIf {
 public:
  MutualExclusionConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MutualExclusionConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void request();
  int32_t send_request();
  void recv_request(const int32_t seqid);
  void release();
  int32_t send_release();
  void recv_release(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
